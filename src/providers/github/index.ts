// In here we are just working with the github client
import { Octokit } from 'octokit'
import { config } from '../../config'
import { log } from '../../log'
import { Repository } from '../../repositories/types'
const envConf = config()
const octokit = new Octokit({ auth: envConf.github.token })
// to determine if we should make changes
const dryRun = process.env.DRY_RUN || false

export const listRepos = async () => {
  // we need to use the paginate iterator incase there are more than 30
  // repos
  const iterator = octokit.paginate.iterator(octokit.rest.repos.listForOrg, {
    org: envConf.github.org,
  })

  // iterate through each response
  // @TODO try to get some sort of async reducer to work,
  // we are loosing type safety here and it will bite us in the ass
  let finalRepos: any[] = []
  for await (const { data: repos } of iterator) {
    finalRepos = finalRepos.concat(repos)
  }
  return finalRepos
}

export const createRepo = async (repo: Repository) => {
  if (dryRun) {
    log('info', `dry run, would create repo: ${repo.name}`)
    return
  }
  log('info', `creating repo: ${repo.name}`)
  await octokit.rest.repos.createInOrg({
    org: envConf.github.org,
    name: repo.name,
  })
}

export const createTemplatePR = async (repo: Repository) => {
  if (dryRun) {
    log(
      'info',
      `dry run, would copy over template files for repo: ${repo.name}. Using template: ${repo.template}`
    )
    return
  }
  log(
    'info',
    `copying template files for repo ${repo.name}. Using template: ${repo.template}`
  )

  // looks like we might need to config this after all ðŸ˜­
  const owner = 'sirJiggles'
  const branchName = 'initial-template'
  const baseBranch = 'main'

  const baseBranchRef = await octokit.rest.git.getRef({
    owner,
    repo: repo.name,
    ref: `heads/${baseBranch}`,
  })

  const newBranchRef = await octokit.rest.git.createRef({
    owner,
    repo: repo.name,
    ref: `refs/heads/${branchName}`,
    sha: baseBranchRef.data.object.sha,
  })

  const currentCommit = await octokit.rest.git.getCommit({
    owner,
    repo: repo.name,
    commit_sha: newBranchRef.data.object.sha,
  })

  octokit.rest.git.

  const newCommit = await octokit.rest.git.createCommit({
    owner,
    repo: repo.name,
    message: 'Adding template files',
    tree: currentCommit.data.tree.sha,
    parents: [currentCommit.data.sha],
  })

  await octokit.rest.git.updateRef({
    owner,
    repo: repo.name,
    ref: `heads/${branchName}`,
    sha: newCommit.data.sha,
  })

  await octokit.rest.pulls.create({
    owner,
    repo: repo.name,
    head: branchName,
    base: baseBranch,
    title: 'Template files from dev infra',
    body: 'This PR is auto generated by dev infra to copy over the template files to the new repo',
  })
}
